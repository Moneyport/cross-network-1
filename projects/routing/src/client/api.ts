// tslint:disable
/// <reference path="./custom.d.ts" />
/**
 * Router
 * A service for managing peers and routes in a routing table and get the list of peers that can route to a given destination address.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as url from "url";
import { Configuration } from "./configuration";
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';

const BASE_PATH = "http://localhost".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *  
 * @export
 * @interface RequestArgs
 */
export interface RequestArgs {
    url: string;
    options: any;
}

/**
 * 
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration | undefined;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected axios: AxiosInstance = globalAxios) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 * 
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name: "RequiredError" = "RequiredError";
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * A peer that is tracked in the routing table
 * @export
 * @interface Peer
 */
export interface Peer {
    /**
     * The id of the peer
     * @type {string}
     * @memberof Peer
     */
    id: string;
    /**
     * 
     * @type {Relation}
     * @memberof Peer
     */
    relation: Relation;
    /**
     * The secret used to authenticate route updates
     * @type {string}
     * @memberof Peer
     */
    routingSecret?: string;
    /**
     * Should route updates be authenticated
     * @type {boolean}
     * @memberof Peer
     */
    shouldAuth?: boolean;
}

/**
 * The type of relationship a peer has with another peer
 * @export
 * @enum {string}
 */
export enum Relation {
    Parent = 'parent',
    Child = 'child',
    Peer = 'peer',
    Local = 'local'
}

/**
 * A route in a routing table that is associated with a Peer
 * @export
 * @interface Route
 */
export interface Route {
    /**
     * 
     * @type {string}
     * @memberof Route
     */
    prefix?: string;
    /**
     * 
     * @type {Array<any>}
     * @memberof Route
     */
    path?: Array<any>;
    /**
     * 
     * @type {number}
     * @memberof Route
     */
    weight?: number;
    /**
     * 
     * @type {string}
     * @memberof Route
     */
    auth?: string;
}


/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add a new peer to the routing table
         * @summary Add a peer
         * @param {Peer} peer 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPeer(peer: Peer, options: any = {}): RequestArgs {
            // verify required parameter 'peer' is not null or undefined
            if (peer === null || peer === undefined) {
                throw new RequiredError('peer','Required parameter peer was null or undefined when calling addPeer.');
            }
            const localVarPath = `/peers`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Peer" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(peer || {}) : (peer || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Adds a new `Route` for the `Peer`
         * @summary Add a Route for a Peer
         * @param {string} id A unique identifier for a &#x60;Peer&#x60;.
         * @param {Route} route A new &#x60;Route&#x60; to be added.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addRouteForPeer(id: string, route: Route, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling addRouteForPeer.');
            }
            // verify required parameter 'route' is not null or undefined
            if (route === null || route === undefined) {
                throw new RequiredError('route','Required parameter route was null or undefined when calling addRouteForPeer.');
            }
            const localVarPath = `/peers/{id}/routes`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Route" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(route || {}) : (route || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes an existing `Peer`.
         * @summary Delete a Peer
         * @param {string} id A unique identifier for a &#x60;Peer&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePeer(id: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deletePeer.');
            }
            const localVarPath = `/peers/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes an existing `Route` for a `Peer`.
         * @summary Delete a Route
         * @param {string} id A unique identifier for a &#x60;Peer&#x60;.
         * @param {string} prefix A unique identifier for a Route at a Peer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRouteForPeer(id: string, prefix: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteRouteForPeer.');
            }
            // verify required parameter 'prefix' is not null or undefined
            if (prefix === null || prefix === undefined) {
                throw new RequiredError('prefix','Required parameter prefix was null or undefined when calling deleteRouteForPeer.');
            }
            const localVarPath = `/peers/{id}/routes/{prefix}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"prefix"}}`, encodeURIComponent(String(prefix)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets the details of a single instance of a `Peer`.
         * @summary Get a Peer
         * @param {string} id A unique identifier for a &#x60;Peer&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPeer(id: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getPeer.');
            }
            const localVarPath = `/peers/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets a list of `Peer` entities. If a `destinationAddress` is provided then only return peers that are able to route to that address.
         * @summary List Peers
         * @param {string} [destinationAddress] The destination address to filter peers by. Only peers that can route to the provided address are returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPeers(destinationAddress?: string, options: any = {}): RequestArgs {
            const localVarPath = `/peers`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (destinationAddress !== undefined) {
                localVarQueryParameter['destinationAddress'] = destinationAddress;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets the details of a single instance of a `Route` for a `Peer`.
         * @summary Get a Route for a Peer
         * @param {string} id A unique identifier for a &#x60;Peer&#x60;.
         * @param {string} prefix A unique identifier for a Route at a Peer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRouteForPeer(id: string, prefix: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getRouteForPeer.');
            }
            // verify required parameter 'prefix' is not null or undefined
            if (prefix === null || prefix === undefined) {
                throw new RequiredError('prefix','Required parameter prefix was null or undefined when calling getRouteForPeer.');
            }
            const localVarPath = `/peers/{id}/routes/{prefix}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"prefix"}}`, encodeURIComponent(String(prefix)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets a list of all `Route` entities for the `Peer`.
         * @summary List Routes for Peer
         * @param {string} id A unique identifier for a &#x60;Peer&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoutesForPeer(id: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getRoutesForPeer.');
            }
            const localVarPath = `/peers/{id}/routes`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates an existing `Peer`.
         * @summary Update a Peer
         * @param {string} id A unique identifier for a &#x60;Peer&#x60;.
         * @param {Peer} peer Updated &#x60;Peer&#x60; information.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePeer(id: string, peer: Peer, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling updatePeer.');
            }
            // verify required parameter 'peer' is not null or undefined
            if (peer === null || peer === undefined) {
                throw new RequiredError('peer','Required parameter peer was null or undefined when calling updatePeer.');
            }
            const localVarPath = `/peers/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Peer" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(peer || {}) : (peer || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates an existing `Route` for a `Peer`.
         * @summary Update a Route for a Peer
         * @param {string} id A unique identifier for a &#x60;Peer&#x60;.
         * @param {string} prefix A unique identifier for a Route at a Peer
         * @param {Route} route Updated &#x60;Route&#x60; information for a &#x60;Peer&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRouteForPeer(id: string, prefix: string, route: Route, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling updateRouteForPeer.');
            }
            // verify required parameter 'prefix' is not null or undefined
            if (prefix === null || prefix === undefined) {
                throw new RequiredError('prefix','Required parameter prefix was null or undefined when calling updateRouteForPeer.');
            }
            // verify required parameter 'route' is not null or undefined
            if (route === null || route === undefined) {
                throw new RequiredError('route','Required parameter route was null or undefined when calling updateRouteForPeer.');
            }
            const localVarPath = `/peers/{id}/routes/{prefix}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"prefix"}}`, encodeURIComponent(String(prefix)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Route" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(route || {}) : (route || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Add a new peer to the routing table
         * @summary Add a peer
         * @param {Peer} peer 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPeer(peer: Peer, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).addPeer(peer, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);                
            };
        },
        /**
         * Adds a new `Route` for the `Peer`
         * @summary Add a Route for a Peer
         * @param {string} id A unique identifier for a &#x60;Peer&#x60;.
         * @param {Route} route A new &#x60;Route&#x60; to be added.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addRouteForPeer(id: string, route: Route, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).addRouteForPeer(id, route, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);                
            };
        },
        /**
         * Deletes an existing `Peer`.
         * @summary Delete a Peer
         * @param {string} id A unique identifier for a &#x60;Peer&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePeer(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).deletePeer(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);                
            };
        },
        /**
         * Deletes an existing `Route` for a `Peer`.
         * @summary Delete a Route
         * @param {string} id A unique identifier for a &#x60;Peer&#x60;.
         * @param {string} prefix A unique identifier for a Route at a Peer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRouteForPeer(id: string, prefix: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).deleteRouteForPeer(id, prefix, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);                
            };
        },
        /**
         * Gets the details of a single instance of a `Peer`.
         * @summary Get a Peer
         * @param {string} id A unique identifier for a &#x60;Peer&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPeer(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Peer> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).getPeer(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);                
            };
        },
        /**
         * Gets a list of `Peer` entities. If a `destinationAddress` is provided then only return peers that are able to route to that address.
         * @summary List Peers
         * @param {string} [destinationAddress] The destination address to filter peers by. Only peers that can route to the provided address are returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPeers(destinationAddress?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Peer>> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).getPeers(destinationAddress, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);                
            };
        },
        /**
         * Gets the details of a single instance of a `Route` for a `Peer`.
         * @summary Get a Route for a Peer
         * @param {string} id A unique identifier for a &#x60;Peer&#x60;.
         * @param {string} prefix A unique identifier for a Route at a Peer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRouteForPeer(id: string, prefix: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Route> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).getRouteForPeer(id, prefix, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);                
            };
        },
        /**
         * Gets a list of all `Route` entities for the `Peer`.
         * @summary List Routes for Peer
         * @param {string} id A unique identifier for a &#x60;Peer&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoutesForPeer(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Route>> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).getRoutesForPeer(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);                
            };
        },
        /**
         * Updates an existing `Peer`.
         * @summary Update a Peer
         * @param {string} id A unique identifier for a &#x60;Peer&#x60;.
         * @param {Peer} peer Updated &#x60;Peer&#x60; information.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePeer(id: string, peer: Peer, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).updatePeer(id, peer, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);                
            };
        },
        /**
         * Updates an existing `Route` for a `Peer`.
         * @summary Update a Route for a Peer
         * @param {string} id A unique identifier for a &#x60;Peer&#x60;.
         * @param {string} prefix A unique identifier for a Route at a Peer
         * @param {Route} route Updated &#x60;Route&#x60; information for a &#x60;Peer&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRouteForPeer(id: string, prefix: string, route: Route, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).updateRouteForPeer(id, prefix, route, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);                
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Add a new peer to the routing table
         * @summary Add a peer
         * @param {Peer} peer 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPeer(peer: Peer, options?: any) {
            return DefaultApiFp(configuration).addPeer(peer, options)(axios, basePath);
        },
        /**
         * Adds a new `Route` for the `Peer`
         * @summary Add a Route for a Peer
         * @param {string} id A unique identifier for a &#x60;Peer&#x60;.
         * @param {Route} route A new &#x60;Route&#x60; to be added.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addRouteForPeer(id: string, route: Route, options?: any) {
            return DefaultApiFp(configuration).addRouteForPeer(id, route, options)(axios, basePath);
        },
        /**
         * Deletes an existing `Peer`.
         * @summary Delete a Peer
         * @param {string} id A unique identifier for a &#x60;Peer&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePeer(id: string, options?: any) {
            return DefaultApiFp(configuration).deletePeer(id, options)(axios, basePath);
        },
        /**
         * Deletes an existing `Route` for a `Peer`.
         * @summary Delete a Route
         * @param {string} id A unique identifier for a &#x60;Peer&#x60;.
         * @param {string} prefix A unique identifier for a Route at a Peer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRouteForPeer(id: string, prefix: string, options?: any) {
            return DefaultApiFp(configuration).deleteRouteForPeer(id, prefix, options)(axios, basePath);
        },
        /**
         * Gets the details of a single instance of a `Peer`.
         * @summary Get a Peer
         * @param {string} id A unique identifier for a &#x60;Peer&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPeer(id: string, options?: any) {
            return DefaultApiFp(configuration).getPeer(id, options)(axios, basePath);
        },
        /**
         * Gets a list of `Peer` entities. If a `destinationAddress` is provided then only return peers that are able to route to that address.
         * @summary List Peers
         * @param {string} [destinationAddress] The destination address to filter peers by. Only peers that can route to the provided address are returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPeers(destinationAddress?: string, options?: any) {
            return DefaultApiFp(configuration).getPeers(destinationAddress, options)(axios, basePath);
        },
        /**
         * Gets the details of a single instance of a `Route` for a `Peer`.
         * @summary Get a Route for a Peer
         * @param {string} id A unique identifier for a &#x60;Peer&#x60;.
         * @param {string} prefix A unique identifier for a Route at a Peer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRouteForPeer(id: string, prefix: string, options?: any) {
            return DefaultApiFp(configuration).getRouteForPeer(id, prefix, options)(axios, basePath);
        },
        /**
         * Gets a list of all `Route` entities for the `Peer`.
         * @summary List Routes for Peer
         * @param {string} id A unique identifier for a &#x60;Peer&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoutesForPeer(id: string, options?: any) {
            return DefaultApiFp(configuration).getRoutesForPeer(id, options)(axios, basePath);
        },
        /**
         * Updates an existing `Peer`.
         * @summary Update a Peer
         * @param {string} id A unique identifier for a &#x60;Peer&#x60;.
         * @param {Peer} peer Updated &#x60;Peer&#x60; information.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePeer(id: string, peer: Peer, options?: any) {
            return DefaultApiFp(configuration).updatePeer(id, peer, options)(axios, basePath);
        },
        /**
         * Updates an existing `Route` for a `Peer`.
         * @summary Update a Route for a Peer
         * @param {string} id A unique identifier for a &#x60;Peer&#x60;.
         * @param {string} prefix A unique identifier for a Route at a Peer
         * @param {Route} route Updated &#x60;Route&#x60; information for a &#x60;Peer&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRouteForPeer(id: string, prefix: string, route: Route, options?: any) {
            return DefaultApiFp(configuration).updateRouteForPeer(id, prefix, route, options)(axios, basePath);
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * Add a new peer to the routing table
     * @summary Add a peer
     * @param {Peer} peer 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addPeer(peer: Peer, options?: any) {
        return DefaultApiFp(this.configuration).addPeer(peer, options)(this.axios, this.basePath);
    }

    /**
     * Adds a new `Route` for the `Peer`
     * @summary Add a Route for a Peer
     * @param {string} id A unique identifier for a &#x60;Peer&#x60;.
     * @param {Route} route A new &#x60;Route&#x60; to be added.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addRouteForPeer(id: string, route: Route, options?: any) {
        return DefaultApiFp(this.configuration).addRouteForPeer(id, route, options)(this.axios, this.basePath);
    }

    /**
     * Deletes an existing `Peer`.
     * @summary Delete a Peer
     * @param {string} id A unique identifier for a &#x60;Peer&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deletePeer(id: string, options?: any) {
        return DefaultApiFp(this.configuration).deletePeer(id, options)(this.axios, this.basePath);
    }

    /**
     * Deletes an existing `Route` for a `Peer`.
     * @summary Delete a Route
     * @param {string} id A unique identifier for a &#x60;Peer&#x60;.
     * @param {string} prefix A unique identifier for a Route at a Peer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteRouteForPeer(id: string, prefix: string, options?: any) {
        return DefaultApiFp(this.configuration).deleteRouteForPeer(id, prefix, options)(this.axios, this.basePath);
    }

    /**
     * Gets the details of a single instance of a `Peer`.
     * @summary Get a Peer
     * @param {string} id A unique identifier for a &#x60;Peer&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getPeer(id: string, options?: any) {
        return DefaultApiFp(this.configuration).getPeer(id, options)(this.axios, this.basePath);
    }

    /**
     * Gets a list of `Peer` entities. If a `destinationAddress` is provided then only return peers that are able to route to that address.
     * @summary List Peers
     * @param {string} [destinationAddress] The destination address to filter peers by. Only peers that can route to the provided address are returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getPeers(destinationAddress?: string, options?: any) {
        return DefaultApiFp(this.configuration).getPeers(destinationAddress, options)(this.axios, this.basePath);
    }

    /**
     * Gets the details of a single instance of a `Route` for a `Peer`.
     * @summary Get a Route for a Peer
     * @param {string} id A unique identifier for a &#x60;Peer&#x60;.
     * @param {string} prefix A unique identifier for a Route at a Peer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getRouteForPeer(id: string, prefix: string, options?: any) {
        return DefaultApiFp(this.configuration).getRouteForPeer(id, prefix, options)(this.axios, this.basePath);
    }

    /**
     * Gets a list of all `Route` entities for the `Peer`.
     * @summary List Routes for Peer
     * @param {string} id A unique identifier for a &#x60;Peer&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getRoutesForPeer(id: string, options?: any) {
        return DefaultApiFp(this.configuration).getRoutesForPeer(id, options)(this.axios, this.basePath);
    }

    /**
     * Updates an existing `Peer`.
     * @summary Update a Peer
     * @param {string} id A unique identifier for a &#x60;Peer&#x60;.
     * @param {Peer} peer Updated &#x60;Peer&#x60; information.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updatePeer(id: string, peer: Peer, options?: any) {
        return DefaultApiFp(this.configuration).updatePeer(id, peer, options)(this.axios, this.basePath);
    }

    /**
     * Updates an existing `Route` for a `Peer`.
     * @summary Update a Route for a Peer
     * @param {string} id A unique identifier for a &#x60;Peer&#x60;.
     * @param {string} prefix A unique identifier for a Route at a Peer
     * @param {Route} route Updated &#x60;Route&#x60; information for a &#x60;Peer&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateRouteForPeer(id: string, prefix: string, route: Route, options?: any) {
        return DefaultApiFp(this.configuration).updateRouteForPeer(id, prefix, route, options)(this.axios, this.basePath);
    }

}

